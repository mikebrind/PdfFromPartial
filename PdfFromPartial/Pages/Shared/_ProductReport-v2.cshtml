@model ChromeVersionModel
@using PdfFromPartial.Models
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <base href="@Model.BaseHref" />
    <link href="/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="/css/bootstrap-icons.css" rel="stylesheet" type="text/css" />
    <link href="/css/pdf.css" rel="stylesheet" type="text/css" />
        <style>
        @@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400&display=swap');
        @@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css");
</style>
</head>
<body>
    @if (Model.Products.Any())
    {
        <h2 class="my-5">Reorder Report</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Per Unit</th>
                    <th>Stock</th>
                    <th>Discontinued?</th>
                    <th>Reorder?</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Model.Products.OrderBy(p => p.ProductName))
                {
                    <tr class="@(product.Discontinued ? "text-black-50" : null)">
                        <td>@product.ProductName</td>
                        <td>@product.QuantityPerUnit</td>
                        <td>@product.UnitsInStock</td>
                        <td class="align-center">
                            @if (product.Discontinued)
                            {
                                <i class="bi bi-check-circle"></i>
                            }
                        </td>
                        <td class="align-center">
                            @if (ShouldReorder(product))
                            {
                                <i class="bi bi-check-circle text-danger"></i>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</body>
</html>
@functions {
    bool ShouldReorder(Product product) => product.ReorderLevel < product.UnitsInStock && !product.Discontinued;
}